#!/usr/bin/perl -w
use Getopt::Long;
use Time::Seconds;
use Data::Dumper;
use File::Basename;
use LWP::Simple;
# Price of the food, and time to grow
$data{'Berry Bauble'}={'price'=>'65000000','food'=>'1000000','tpp'=>'129600'};
$data{'Kraken Kabbage'}={'price'=>'35000000','food'=>'500000','tpp'=>'21600'};
$data{'Cacti-snack'}={'price'=>'20000000','food'=>'250000','tpp'=>'1800'};
$data{'Beanstalk'}={'price'=>'5000000','food'=>'100000','tpp'=>'3600'};
$data{'Omega Squash'}={'price'=>'1000000','food'=>'20000','tpp'=>'600'};
$data{'Sarjin Pepper'}={'price'=>'500000','food'=>'10000','tpp'=>'60'};
$data{'Dragon Fruit'}={'price'=>'75000','food'=>'3000','tpp'=>'86400'};
$data{'Pumpermelons'}={'price'=>'15000','food'=>'800','tpp'=>'21600'};
$data{'Blushrooms'}={'price'=>'5000','food'=>'300','tpp'=>'7200'};
$data{'Zazzberries'}={'price'=>'1000','food'=>'75','tpp'=>'1800'};
$data{'Dragon Root'}={'price'=>'250','food'=>'20','tpp'=>'300'};
$data{'Dragon Snaps'}={'price'=>'50','food'=>'5','tpp'=>'30'};
my $URL='https://docs.google.com/spreadsheets/d/e/2PACX-1vSdpJ8PP_odJwsMAoSOSIGR__Ikff2EyDD99yneuocLsRqH1VMNgtvl3qFSFAEGYBtuiueOq53jYJfr/pub?gid=167749365&single=true&output=csv';
my $farms=11;
format OUT_TOP=
+-------+---------------+---------+-------+-----------+--------+----------------+-------+
|Score  |     Plant     |   cpp   |  tpp  |    Cost   | Rounds |      Time      | Farms |
+-------+---------------+---------+-------+-----------+--------+----------------+-------+
.
format OUT =
|@##.## | @<<<<<<<<<<<< | @>>>>>> | @>>>>>| @>>>>>>>> | @>>>>> | @>>>>>>>>>>>>> | @##   |
$score,$plant,$cpp,$tpp,$cost,$rounds,$time,$farms
.
format DV_TOP =
+--------------+------+-------------+-----------------------------+-----------------------------------------+-----------+
| Name         | Inc. | Incubation  | Combo                       | Habitats                                | Trait     |
+--------------+------+-------------+-----------------------------+-----------------------------------------+-----------+
.
format DV =
|@<<<<<<<<<<<< | @<<< | @<<<<<<<<<< | @>>>>>>>>>>>>+@<<<<<<<<<<<< | @<<<<<<<< @<<<<<<<< @<<<<<<<< @<<<<<<<< | @<<<<<<<< |
$name, $income, $incubation_time, $combo1, $combo2, $habitat1, $habitat2, $habitat3, $habitat4, $trait
.
use vars qw( $level $food $help $incubation );
GetOptions('level=s',\$level,
	'food=i',\$food,
	'help',\$help,
	'farms=i',\$farms,
	'db=s',\$db
);

# ----
# Rounding function
sub round($) {
	my $n=shift;
	if ($n == sprintf('%.0f',$n)) {
		return $n;
	} else {
		return int($n)+1;
	}
}
sub grouping($) {
	local $_  = shift;
	1 while s/^(-?\d+)(\d{3})/$1 $2/;
	return $_;
}
sub s2dhms($) {
	$secs=shift(@_);
	my $out;
	my %unity;
	@unity=('s','min','h','d');
	foreach my $dur (ONE_DAY,ONE_HOUR,ONE_MINUTE,1) {
		if ($secs>=$dur) {
			# Je fais ce que je veux, non mais
			$out.=sprintf('%.0f'.$unity[int(log($dur)/log(40))],$secs/$dur);
			$secs=$secs%$dur;
		}
	}
	return $out;
}
sub compute($$) {
	my $food=shift;
	my $plant=shift;
	# How many plants do I need for gather required food ?
	my $plants=round($food/$data{$plant}{'food'});
	my $cost=$plants*$data{$plant}{'price'};
	# How many rounds of n farms do I need to gather food ?
	my $rounds=round($plants/$farms);
	# How many time does those rounds will take ?
	my $time=$data{$plant}{'tpp'}*$rounds;
	$time=$data{$plant}{'tpp'} if ($time < $data{$plant}{'tpp'} );
	# This is the cost of the n rounds
	my $score=sprintf('%5.2f',log($time*$cost)/log(10));
	return {'plant'=>$plant,'tpp'=>$time,'score'=>$score,'rounds'=>$rounds,'cost'=>$cost};

}
sub n2gmk($) {
    my $n=shift;
	# This will give to power of 10 of the number, but I need a multiple of 3
	my $pow10=log($n)/log(10);
	# Rounding: if results seems to be an integer (if $n=1000_000, for example), actually it is not
	$pow10="$pow10";
	# Now it is
	$pow=int($pow10/3);
	$res=$n/(10**(3*$pow)).substr(' kMGTP',$pow,1);
	$res=~s/ //;
	return $res;
}
# ----
if(defined $level) {
	our $to=$level;
	our $from=1;
	if ($level=~/(\d+)-(\d+)/) {
		$from=$1;$to=$2;
	}
	my $food_end=2**($to-1)-1;
	my $food_start=2**($from-1)-1;
	my $food=20*($food_end-$food_start);
	print "To get dragon from level $from to level $to, you should earn:\n".grouping($food)." food\n\n";
	print "This will cost you:\n";
	our %results;
	foreach my $plant (sort keys %data) {
		my $res=compute($food,$plant);
		$results{$plant}=$res;
	}
	@sorted=sort {$results{$a}{'score'} <=> $results{$b}{'score'}} keys %results;
	select(STDOUT);
	$~="OUT";
	$^="OUT_TOP";
	foreach $plant (@sorted) {
		$score=$results{$plant}{'score'};
		$cost=n2gmk($results{$plant}{'cost'});
		$rounds=$results{$plant}{'rounds'};
		$time=s2dhms(int($results{$plant}{'tpp'}));
		$tpp=s2dhms($data{$plant}{'tpp'});
		$cpp=n2gmk($data{$plant}{'price'});
		write;
		#print $results{$plant}{'score'},": ",grouping($results{$plant}{'cost'})," with ",$results{$plant}{'rounds'}," rounds of ",$plant," (this will take ".s2dhms(int($results{$plant}{'tpp'})),") with $farms farms) \n";
	}
} elsif (defined $food) {
	print "Price of the food at level $food:\n".5*2**($food-1)."\n";
} elsif (defined $db) {
	my $c=get $URL;
	my @dragons;
	my $habitats;
	foreach my $line (split(/\r\n/,$c)) {
		$line=~s/\xa0/ /g;
		push @dragons,($line);
	}
	#print Dumper(\@dragons);
	#my $dragon=pop(grep {/^$incubation.*/i} @dragons);
	my @res=grep {/^$db.*/i} @dragons;
	# Nom,Income,,NbS,Prio,Urgence ?,NbG,Prio,Urgence ?,Incubation,Combo,,Permanent ?,Habitat,Habitat,Habitat,Habitat,Trait
	select(STDOUT);
	$~="DV";
	$^="DV_TOP";
	foreach my $line (@res) {
		$trait='';
		($name, $income, $incubation_time, $combo1, $combo2, $habitat1, $habitat2, $habitat3, $habitat4, $trait)=(split(/,/,$line))[0,1,9,10,11,13,14,15,16,17];
		$habitat2=defined $habitat2?$habitat2:'';
		$habitat3=defined $habitat3?$habitat3:'';
		$habitat4=defined $habitat4?$habitat4:'';
		$trait=defined $trait?$trait:'';
		my @habitats=($habitat1,$habitat2,$habitat3,$habitat4);
		write;
	}
   	#"$name:$income:$incubation_time:$trait";
	#print "\n";
} else {
	print "\n DragonVale Helper\n\n";
	print basename($0)," --level [<start level>-]<level> [ --farms <n> ]\n";
	print basename($0)," --food  <level>\n\n";
	print " --level: compute food dragon needs to reach that level, from level 1 or <start level>\n";
	print " --farms: number of treat farm you have\n";
	print " This will print something like\n\n";
	print "
    +-------+---------------+-------+-----------------------+--------+----------------+-------+
    |Score  |     Plant     |  tpp  |          Cost         | Rounds |      Time      | Farms |
    +-------+---------------+-------+-----------------------+--------+----------------+-------+
    | 15.83 | Dragon Snaps  |    30s|           786 432 000 | 285976 |      99d7h8min |  11   |
    | 16.83 | Sarjin Pepper |   1min|     7 864 320 000 000 |    143 |        2h23min |  11   |\n\n";
	print " First number is the score: log10(time*cost). This is supposed to indicate how a combination is interesting. The lower the score, the more it is.\n";
	print " In this case, the first combination is more interesting, as it cost you less and takes less time.\n\n";
	print " --food: display price of the food at that level\n";
}
